@{
    ViewData["Title"] = "WithAttribute";
    var headers = Context.Request.Headers.Where(h => h.Key == "controller" || h.Key == "user").ToDictionary(d => d.Key, d => d.Value);
}

<h2>檢查看看Header吧</h2>
<hr />

<div class="row">
    <div class="col-md-3" style="color:brown;font-size:16px;">Header-Key</div>
    <div class="col-md-3" style="color:brown;font-size:16px;">Header-Value</div>
</div>

@if (headers.Count > 0)
{
    @foreach (var item in headers)
    {
        <div class="row">
            <div class="col-md-3">@item.Key</div>
            <div class="col-md-3">@item.Value</div>
        </div>
    }
}



@{
    ViewData["Title"] = "WithoutAttribute";
    var headers = Context.Request.Headers.Where(h => h.Key == "controller" || h.Key == "user").ToDictionary(d => d.Key, d => d.Value);
}

<h2>檢查看看Header吧</h2>
<hr />

<div class="row">
    <div class="col-md-3" style="color:brown;font-size:16px;">Header-Key</div>
    <div class="col-md-3" style="color:brown;font-size:16px;">Header-Value</div>
</div>

@if (headers.Count > 0)
{
    @foreach (var item in headers)
    {
        <div class="row">
            <div class="col-md-3">@item.Key</div>
            <div class="col-md-3">@item.Value</div>
        </div>
    }
}




using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.AspNetCore.Mvc.ViewFeatures;

namespace Web.ActionFilters
{
    public class ExceptionFilter : IExceptionFilter
    {
        /// <summary>
        /// OnException...
        /// </summary>
        public void OnException(ExceptionContext context)
        {
            //統一例外發生時的訊息

            //把真實的Exception記錄起來，但不給USER看~
            string defaultMessage = "[官方說法]千錯萬錯都不告訴你是誰的錯~咬我啊!";
            throw new Exception(defaultMessage);
        }
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.Filters;

namespace Web.ActionFilters
{
    public class AddHeaderAttribute : Attribute, IActionFilter
    {
        private readonly string _headerTitle;
        private readonly string _headerValue;

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="prefix"></param>
        /// <param name="suffix"></param>
        public AddHeaderAttribute(string title, string value)
        {
            _headerTitle = title;
            _headerValue = value;
        }

        /// <summary>
        /// Called before the action executes, after model binding is complete.
        /// </summary>
        /// <param name="context">The Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext.</param>
        public void OnActionExecuting(ActionExecutingContext context)
        {
            context.HttpContext.Request.Headers.Add(_headerTitle, _headerValue);
        }

        /// <summary>
        /// Called after the action executes, before the action result.
        /// </summary>
        /// <param name="context">The Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext.</param>
        public void OnActionExecuted(ActionExecutedContext context)
        {
            
        }
    }
}



